package database.cassandra.tables

import java.util.UUID

import akka.http.scaladsl.model.DateTime
import com.datastax.driver.core.ConsistencyLevel
import com.outworkers.phantom.builder.query.InsertQuery
import com.outworkers.phantom.dsl._
import com.softwaremill.bootzooka.user._
import models.{BasicUserData, RememberMeToken, User}

import scala.concurrent.Future

// This is a phantom cassandra model that maps the table to the User case class
abstract class RememberMeTokens extends Table[RememberMeTokens, RememberMeToken] {
  override def tableName: String = "remember_me_tokens"

  object selector extends StringColumn with PartitionKey
  object token_hash extends StringColumn
  object user_id extends UUIDColumn
  object valid_to extends DateTimeColumn


  def add(token: RememberMeToken): Future[ResultSet] = {
    store(token)
      .consistencyLevel_=(ConsistencyLevel.ALL)
      .future()
  }

  def remove(selector: String): Future[ResultSet] = {
    delete.where(_.selector eqs selector)
      .consistencyLevel_=(ConsistencyLevel.ONE)
      .future()
  }

  /**
    * Note: this was supposed to be generated by Phantom!
    *
    * @param record
    * @return
    */
  def store(record: RememberMeToken): InsertQuery.Default[RememberMeTokens, RememberMeToken] = {
    insert
      .value(_.selector, record.selector)
      .value(_.token_hash, record.tokenHash)
      .value(_.user_id, record.userId)
      .value(_.valid_to, record.validTo)
  }

  def findBySelector(selector: String): Future[Option[RememberMeToken]] = {
    select.where(_.selector eqs selector).one
  }
}
