package database.cassandra.tables

import com.datastax.driver.core.ConsistencyLevel
import com.outworkers.phantom.builder.query.InsertQuery
import com.outworkers.phantom.dsl._
import com.softwaremill.bootzooka.user.UserId
import models.User

import scala.concurrent.Future

abstract class UsersByEmail extends Table[UsersByEmail, User] {

  override def tableName: String = "users_by_email"

  object email extends StringColumn with PartitionKey
  object id extends UUIDColumn
  object first_name extends StringColumn
  object last_name extends StringColumn
  object password_hash extends StringColumn
  object salt extends StringColumn

  def add(user: User): Future[ResultSet] = {
    store(user)
      .consistencyLevel_=(ConsistencyLevel.ALL)
      .future()
  }

  /**
    * Note: this was supposed to be generated by Phantom!
    *
    * @param record
    * @return
    */
  def store(record: User): InsertQuery.Default[UsersByEmail, User] = {
    insert
      .value(_.email, record.email)
      .value(_.id, record.id)
      .value(_.first_name, record.firstName)
      .value(_.last_name, record.lastName)
      .value(_.password_hash, record.passwordHash)
      .value(_.salt, record.salt)
  }

  def findByEmail(email: String): Future[Option[User]] = {
    select.where(_.email eqs email).one()
  }

  def deleteEmail(email: String): Future[ResultSet] = {
    delete.where(_.email eqs email)
      .consistencyLevel_=(ConsistencyLevel.ONE)
      .future()
  }

  def changePassword(email: String, newPassword: String): Future[ResultSet] = {
    update
      .where(_.email eqs email)
      .modify(_.password_hash setTo newPassword)
      .future()
  }
}
