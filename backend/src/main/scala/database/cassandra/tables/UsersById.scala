package database.cassandra.tables

import java.util.UUID

import com.datastax.driver.core.ConsistencyLevel
import com.outworkers.phantom.builder.query.InsertQuery
import com.outworkers.phantom.dsl._
import com.softwaremill.bootzooka.user._
import models.{BasicUserData, User}

import scala.concurrent.Future

// This is a phantom cassandra model that maps the table to the User case class
abstract class UsersById extends Table[UsersById, User] {

  override def tableName: String = "users_by_id"

  object id extends UUIDColumn with PartitionKey
  object email extends StringColumn
  object first_name extends StringColumn
  object last_name extends StringColumn
  object password_hash extends StringColumn
  object salt extends StringColumn

  def add(user: User): Future[ResultSet] = {
    store(user)
      .consistencyLevel_=(ConsistencyLevel.ALL)
      .future()
  }

  /**
    * Note: this was supposed to be generated by Phantom!
    *
    * @param record
    * @return
    */
  def store(record: User): InsertQuery.Default[UsersById, User] = {
    insert
      .value(_.id, record.id)
      .value(_.email, record.email)
      .value(_.first_name, record.firstName)
      .value(_.last_name, record.lastName)
      .value(_.password_hash, record.passwordHash)
      .value(_.salt, record.salt)
  }

  def findById(id: UUID): Future[Option[User]] = {
    select.where(_.id eqs id).one()
  }

  def findBasicDataById(userId: UUID): Future[Option[BasicUserData]] = {
    select.where(_.id eqs userId).one().map{ user =>
      user match {
        case Some(u) =>
          Some(BasicUserData(u.id, u.firstName, u.lastName, u.email))
        case None => None
      }
    }
  }

  def changePassword(userId: UserId, newPassword: String): Future[ResultSet] = {
    update
      .where(_.id eqs userId)
      .modify(_.password_hash setTo newPassword)
      .future()
  }

  def changeEmail(userId: UserId, newEmail: String): Future[ResultSet] = {
    update
      .where(_.id eqs userId)
      .modify(_.email setTo newEmail)
      .future()
  }
}

